@model GridAddonModel
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";
     /*
     * <a href="@Url.Action("Content_Addon", "ProductAddon", new {typeaddon=1,cssclass = "discount",title="title page",description="description of page" })" class="t-button">Discount</a>
     * Model.TypeAddon  int   input parameters from typeaddon=1
     * Model.CssClassName  varchar  input parameters from cssclass="discount"
     * Model.Title varchar input parameters from title="title page"
     * Model.Description varchar input parameters from description="description of page"
     */
    Html.AddTitleParts(Model.Title);
}
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
@using FoxNetSoft.Plugin.Misc.ProductAddon.Models;

<div class="page category-page">
    <div class="page-title">
        <h1>@Model.Title</h1>
    </div>
    <div class="page-body">
        @*description*@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        <div class="product-selectors">
            @*view mode*@
            @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0)
            {
                <div class="product-viewmode">
                    <span>@T("Categories.ViewMode")</span>
                    @Html.DropDownList("products-viewmode", Model.PagingFilteringContext.AvailableViewModes, new { onchange = "setLocation(this.value);" })
                </div>
            }
            @*sorting*@
            @if (Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
            {
                <div class="product-sorting">
                    <span>@T("Categories.OrderBy")</span>
                    @Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                </div>
            }
    
            @*page size*@
            @if (Model.PagingFilteringContext.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
            {
                <div class="product-page-size">
                    <span>@T("Categories.PageSize")</span> <span>@Html.DropDownList("products-pagesize", Model.PagingFilteringContext.PageSizeOptions, new { onchange = "setLocation(this.value);" })</span>
                    <span>@T("Categories.PageSize.PerPage")</span>
                </div>
            }
        </div>
        @*product list*@
        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "list")
            {
            @*list mode*@
            <div class="product-list">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box">
                        @*@Html.Partial("~/Views/Catalog/_ProductBox.cshtml", product)*@
                        @Html.Partial(Model.PathToView, product)
                    </div>
                }
            </div>
            }
            else
            {
            @*grid mode*@
            <div class="product-grid">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box">
                        @*@Html.Partial("~/Views/Catalog/_ProductBox.cshtml", product)*@
                        @Html.Partial(Model.PathToView, product)
                     </div>
                }
            </div>
            }
        }
        <div class="pager">
            @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
        </div>
    </div>
</div>
