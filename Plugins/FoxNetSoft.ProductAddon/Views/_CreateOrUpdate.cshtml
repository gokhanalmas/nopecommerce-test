@model AddonModel
@using Nop.Core.Infrastructure
@using Nop.Web.Framework
@using System.Web.Mvc.Html
@using FoxNetSoft.Plugin.Misc.ProductAddon.Models
@using Telerik.Web.Mvc.UI;
@using Nop.Core.Events;
@using Nop.Web.Framework.Events;
@using Nop.Services.Events;
@Html.ValidationSummary(false)
@if (Model.IsRegisted == false)
{
    @T("FoxNetSoft.ProductAddon.IsNoRegisted")        
}
@Html.HiddenFor(model => model.Id)
@Html.Telerik().TabStrip().Name("category-edit").Items(x =>
{
    x.Add().Text(T("Admin.FoxNetSoft.ProductAddon.Info").Text).Content(TabInfo().ToHtmlString()).Selected(true);
    x.Add().Text(T("Admin.FoxNetSoft.ProductAddon.Products").Text).Content(TabProducts().ToHtmlString());

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new AdminTabStripCreated(x, "category-edit"));
})
@helper TabInfo()
    { 
    <table class="adminContent">
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Id):
                </td>
                <td class="adminData">
                    @Model.Id.ToString()
                    @Html.ValidationMessageFor(model => model.Id)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DatenStart):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DatenStart)
                @Html.ValidationMessageFor(model => model.DatenStart)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DatenEnd):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DatenEnd)
                @Html.ValidationMessageFor(model => model.DatenEnd)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.TypeAddon):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.TypeAddon)
                @Html.ValidationMessageFor(model => model.TypeAddon)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CssClassName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CssClassName)
                @Html.ValidationMessageFor(model => model.CssClassName)
            </td>
        </tr>
        <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.Description):
             </td>
             <td class="adminData">
                 @Html.TextAreaFor(model => model.Description)
                 @Html.ValidationMessageFor(model => model.Description)
             </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Published):
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
    </table>
}
@helper TabProducts()
    {
        if (Model.Id > 0)
        {
            var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
            <table class="adminContent">
                <tr>
                    <td>
            @(Html.Telerik().Grid<AddonModel.AddonProductModel>()
                .Name("products-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.Id);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("ProductList", "ProductAddon", new { addonId = Model.Id })
                            .Update("ProductUpdate", "ProductAddon")
                            .Delete("ProductDelete", "ProductAddon");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.ProductName)
                            .Width(500)
                            .ReadOnly();
                        columns.Bound(x => x.Published)
                            .Filterable(false)
                            .Template(x => x.Published.ToString().ToLower())
                            .Width(100)
                            .Centered();
                        columns.Bound(x => x.Deleted)
                            .Filterable(false)
                            .Template(x => x.Deleted.ToString().ToLower())
                            .Width(100)
                            .Centered();
                        columns.Command(commands =>
                        {
                            //commands.Edit();
                            commands.Delete();
                        })
                        .Width(180);
                    })
                    .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                    .EnableCustomBinding(true))
                    </td>
                </tr>
                <tr>
                    <td width="100%">
                        <input type="submit" id="btnAddNewProduct" name="btnAddNewProduct" value="@T("Admin.FoxNetSoft.ProductAddon.Products.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "ProductAddon", new { addonId = Model.Id, btnId = "btnRefreshProducts", formId = "category-form" }))', 800, 700, true); return false;" class="t-button" />
                        <input type="submit" id="btnRefreshProducts" name="btnRefreshProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshProducts').click(function () {
                                    //refresh grid
                                    var optionsGrid = $("#products-grid");
                                    optionsGrid.data('tGrid').ajaxRequest();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </td>
                </tr>
            </table>
        }
        else
        {
            @T("Admin.FoxNetSoft.ProductAddon.Products.SaveBeforeEdit")
        }
}
